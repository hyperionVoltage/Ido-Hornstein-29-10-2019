{"version":3,"sources":["serviceWorker.js","index.js","Context/StateContext.js"],"names":["Boolean","window","location","hostname","match","Header","React","lazy","Loading","ReactDOM","render","useState","setLocation","forecast","setForecast","metricUnits","setMetricUnits","locationCode","setLocationCode","selectedLocation","setSelectedLocation","currentWeather","setCurrentWeather","favoriteLocations","setFavoriteLocations","searchedFavorites","setSearchedFavorites","lastLocationSearch","setLastLocationSearch","errors","setErrors","lightTheme","setLightTheme","usedGeolocation","setUsedGeolocation","locationProvider","useMemo","forecastProvider","metricUnitProvider","locationCodeProvider","selectedLocationProvider","currentWeatherProvider","favoriteLocationsProvider","searchedFavoritesProvider","lastLocationSearchProvider","errorsProvider","themeProvider","favoriteSearchBarEl","useRef","themesStylesWhole","background","color","themesStylesText","themeStyle","usedGeolocationProvider","stateProvider","fallback","StateContext","Provider","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","createContext"],"mappings":"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","file":"static/js/main.6dbe07d3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Suspense, useState, useMemo, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateContext } from \"./Context/StateContext\";\n\nconst Header = React.lazy(() => import(\"./Components/Header\"));\n\nconst Loading = () => {\n  return <div>Currently Loading files</div>;\n};\n\nconst App = () => {\n  const [location, setLocation] = useState();\n  const [forecast, setForecast] = useState();\n  const [metricUnits, setMetricUnits] = useState(true);\n  const [locationCode, setLocationCode] = useState();\n  const [selectedLocation, setSelectedLocation] = useState(\"City Search\");\n  const [currentWeather, setCurrentWeather] = useState();\n  const [favoriteLocations, setFavoriteLocations] = useState([]);\n  const [searchedFavorites, setSearchedFavorites] = useState(\"\");\n  const [lastLocationSearch, setLastLocationSearch] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n  const [lightTheme, setLightTheme] = useState(false);\n  const [usedGeolocation, setUsedGeolocation] = useState(false);\n\n  const locationProvider = useMemo(() => ({ location, setLocation }), [\n    location,\n    setLocation\n  ]);\n\n  const forecastProvider = useMemo(() => ({ forecast, setForecast }), [\n    forecast,\n    setForecast\n  ]);\n\n  const metricUnitProvider = useMemo(() => ({ metricUnits, setMetricUnits }), [\n    metricUnits,\n    setMetricUnits\n  ]);\n\n  const locationCodeProvider = useMemo(\n    () => ({ locationCode, setLocationCode }),\n    [locationCode, setLocationCode]\n  );\n\n  const selectedLocationProvider = useMemo(\n    () => ({ selectedLocation, setSelectedLocation }),\n    [selectedLocation, setSelectedLocation]\n  );\n\n  const currentWeatherProvider = useMemo(\n    () => ({ currentWeather, setCurrentWeather }),\n    [currentWeather, setCurrentWeather]\n  );\n\n  const favoriteLocationsProvider = useMemo(\n    () => ({\n      favoriteLocations,\n      setFavoriteLocations\n    }),\n    [favoriteLocations, setFavoriteLocations]\n  );\n\n  const searchedFavoritesProvider = useMemo(\n    () => ({\n      searchedFavorites,\n      setSearchedFavorites\n    }),\n    [searchedFavorites, setSearchedFavorites]\n  );\n\n  const lastLocationSearchProvider = useMemo(\n    () => ({\n      lastLocationSearch,\n      setLastLocationSearch\n    }),\n    [lastLocationSearch, setLastLocationSearch]\n  );\n\n  const errorsProvider = useMemo(() => ({ errors, setErrors }), [\n    errors,\n    setErrors\n  ]);\n\n  const themeProvider = useMemo(() => ({ lightTheme, setLightTheme }), [\n    lightTheme,\n    setLightTheme\n  ]);\n\n  const favoriteSearchBarEl = useRef(null);\n\n  const themesStylesWhole = themeProvider.lightTheme\n    ? { background: \"#ecf0f1\", color: \"#121212\" }\n    : { background: \"#121212\", color: \"#ecf0f1\" };\n\n  const themesStylesText = themeProvider.lightTheme\n    ? { background: \"#ecf0f1\", color: \"#121212\" }\n    : { background: \"#121212\", color: \"#ecf0f1\" };\n\n  const themeStyle = useMemo(() => ({ themesStylesWhole, themesStylesText }), [\n    themesStylesWhole,\n    themesStylesText\n  ]);\n\n  const usedGeolocationProvider = useMemo(\n    () => ({ usedGeolocation, setUsedGeolocation }),\n    [usedGeolocation, setUsedGeolocation]\n  );\n\n  const stateProvider = {\n    errorsProvider,\n    lastLocationSearchProvider,\n    searchedFavoritesProvider,\n    favoriteLocationsProvider,\n    favoriteLocationsProvider,\n    currentWeatherProvider,\n    locationProvider,\n    forecastProvider,\n    metricUnitProvider,\n    locationCodeProvider,\n    selectedLocationProvider,\n    favoriteSearchBarEl,\n    themeProvider,\n    themeStyle,\n    usedGeolocationProvider\n  };\n\n  return (\n    <Suspense fallback={<Loading />}>\n      <StateContext.Provider value={stateProvider}>\n        <Header />\n      </StateContext.Provider>\n    </Suspense>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","import { createContext } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n"],"sourceRoot":""}